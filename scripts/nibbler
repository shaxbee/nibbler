#!/usr/bin/env python

"""
ZMQ/Protobuf Websocket Bridge.

Usage:
    nibbler [--host=<host>] [--port=<port>] [--index=<file>] [--pretty] PROTO URL...
    nibbler (-h|--help)

Arguments:
    URL              ZMQ socket URL
    PROTO            Generated Protobuf module

Options:
    --host=<host>    Server listening host [default: 127.0.0.1]
    --port=<port>    Server listening port [default: 8080]
    --index=<file>   Webserver index page
    --pretty         Pretty-printing of JSON output
"""

import socket
from importlib import import_module
from threading import Thread, Event

import zmq
import cherrypy
import google.protobuf
from ws4py.websocket import WebSocket
from ws4py.messaging import TextMessage
from cherrypy.process.plugins import SimplePlugin


def consume_deque(q):
    while True:
        try:
            yield q.popleft()
        except IndexError:
            break


class ProtobufWebSocketPlugin(SimplePlugin):

    def __init__(self, bus, context, urls, proto_resolver, payload_frame=-1):
        SimplePlugin.__init__(self, bus)

        self.context = context
        self.urls = urls
        self.proto_resolver = proto_resolver
        self.payload_frame = payload_frame

        self.clients = set()
        self.finished = Event()

    def start(self):
        self.finished.clear()

        self.thread = Thread(name=ProtobufWebSocketPlugin.__name__, target=self.run)
        self.thread.start()

    def stop(self):
        self.finished.set()
        self.thread.join()
        self.thread = None

    def run(self):
        self.socket = self.context.socket(zmq.SUB)
        for url in self.urls:
            self.socket.connect(url)

        self.socket.setsockopt(zmq.SUBSCRIBE, '')

        while not self.finished.is_set():
            if self.socket.poll(100, zmq.POLLIN) != zmq.POLLIN:
                continue

            frames = self.socket.recv_multipart()
            message_type = self.proto_resolver(frames)
            message = message_type.FromString(frames[self.payload_frame])

            cherrypy.engine.publish('websocket-broadcast', TextMessage("Hello World!"))


def make_simple_resolver(proto, frame):
    def _impl(frames):
        message_type = getattr(proto, frames[frame])
        if not isinstance(message_type, (google.protobuf.message.Message, google.protobuf.reflection.GeneratedProtocolMessageType)):
            raise ValueError("Invalid message type <{}>.".format(message_type.__class__.__name__))
        return message_type

    return _impl


if __name__ == "__main__":
    import os
    import sys
    import pkgutil
    import docopt
    from ws4py.server.cherrypyserver import WebSocketTool, WebSocketPlugin

    arguments = docopt.docopt(__doc__, version="Nibbler 1.0")

    host = socket.gethostbyname(arguments['--host'])
    port = int(arguments['--port'])
    index = open(arguments['--index']) if arguments['--index'] is not None else None

    context = zmq.Context()

    # add current working directory for user-defined proto module import
    sys.path.append(os.getcwd())
    proto_module = import_module(arguments['PROTO'])
    proto_resolver = make_simple_resolver(proto_module, 0)

    WebSocketPlugin(cherrypy.engine).subscribe()
    ProtobufWebSocketPlugin(cherrypy.engine, context, arguments['URL'], proto_resolver).subscribe()

    class Root(object):
        @cherrypy.expose
        def index(self):
            return pkgutil.get_data('nibbler', 'static/index.html')

    cherrypy.config.update({
        'server.socket_host': host,
        'server.socket_port': port
    })

    cherrypy.tools.websocket = WebSocketTool()

    cherrypy.quickstart(Root(), config={
        '/': {
            'tools.websocket.on': True,
            'tools.websocket.handler_cls': WebSocket
        }
    })
