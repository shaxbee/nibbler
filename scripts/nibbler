#!/usr/bin/env python

"""
ZMQ/Protobuf Websocket Bridge.

Usage:
    nibbler [--host=<host>] [--port=<port>] [--index=<file>] [--pretty] PROTO URL...
    nibbler (-h|--help)

Arguments:
    URL              ZMQ socket URL
    PROTO            Generated Protobuf module

Options:
    --host=<host>          Server listening host [default: 127.0.0.1]
    --port=<port>          Server listening port [default: 8080]
    --index=<file>         Webserver index page
    --pretty               Pretty-printing of JSON output
    --envelope=<envelope>  Envelope for JSON output [default: identity]

Available envelope types: identity, basic
"""

import socket
from importlib import import_module
from threading import Thread, Event, RLock
from collections import deque

import zmq
import cherrypy
import google.protobuf
import json
from bidict import bidict

from ws4py.websocket import WebSocket
from ws4py.messaging import TextMessage
from cherrypy.process.plugins import SimplePlugin


def consume_deque(queue):
    while True:
        try:
            yield queue.pop()
        except IndexError, e:
            return


def consume_zmq_socket(sock):
    while True:
        try:
            yield sock.recv_multipart(flags=zmq.NOBLOCK)
        except zmq.ZMQError, e:
            return

class JSONProtobufEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, google.protobuf.message.Message):
            return {field.name: value for field, value in obj.ListFields()}
        elif isinstance(obj, google.protobuf.internal.containers.BaseContainer):
            return list(obj)
        else:
            return json.JSONEncoder.default(self, obj)


class NibblerWebSocket(WebSocket):
    def opened(self):
        cherrypy.engine.publish('nibbler-add-client', self)

    def closed(self):
        cherrypy.engine.publish('nibbler-del-client', self)


class ProtobufWebSocketPlugin(SimplePlugin):
    def __init__(self, bus, context, urls, transcoder):
        SimplePlugin.__init__(self, bus)

        self.context = context
        self.urls = urls
        self.transcoder = transcoder

        self.finished = Event()

        self.queue = deque()

        bus.subscribe('nibbler-add-client', lambda client: self.queue.append(('add', client)))
        bus.subscribe('nibbler-del-client', lambda client: self.queue.append(('del', client)))

        self.thread = Thread(name=ProtobufWebSocketPlugin.__name__, target=self.run)
        self.thread.start()

    def stop(self):
        self.finished.set()
        self.thread.join()
        self.thread = None

    def run(self):
        proto_frontend = self.context.socket(zmq.SUB)
        for url in self.urls:
            proto_frontend.connect(url)

        proto_frontend.setsockopt(zmq.SUBSCRIBE, '')

        json_backend = self.context.socket(zmq.PUB)
        json_backend.bind("inproc://#json")
        json_endpoint = json_backend.getsockopt(zmq.LAST_ENDPOINT)

        clients = bidict()
        poller = zmq.Poller()

        while not self.finished.is_set():
            for (action, client) in consume_deque(self.queue):
                if action == 'add':
                    sock = self.context.socket(zmq.SUB)
                    sock.connect(json_endpoint)
                    # TODO: build list of topics based on query string
                    sock.setsockopt(zmq.SUBSCRIBE, '')
                    poller.register(sock, flags=zmq.POLLIN)
                    clients[client] = sock
                elif action == 'del':
                    sock = clients.pop(client)
                    sock.close()

            if proto_frontend.poll(100, zmq.POLLIN) != zmq.POLLIN:
                continue

            frames = proto_frontend.recv_multipart()
            json_backend.send_multipart(self.transcoder(frames))

            for (sock, _) in poller.poll(100):
                client = clients[:sock]
                for (_, message) in consume_zmq_socket(sock):
                    client.send(message)


def no_envelope(topic, message_type, message):
    return message


def basic_envelope(topic, message_type, message):
    return {
        'topic': topic,
        'message_type': str(message_type.DESCRIPTOR.name),
        'message': message
    }


def make_transcoder(proto_resolver, payload_frame=-1, envelope=no_envelope, pretty_print=True):
    indent = 4 if pretty_print else None

    def transcoder(frames):
        topic = frames[0]
        message_type = proto_resolver(frames)
        message = message_type.FromString(frames[payload_frame])
        message_json = json.dumps(envelope(topic, message_type, message), cls=JSONProtobufEncoder, indent=indent)

        return (topic, message_json)
    
    return transcoder


def make_simple_resolver(proto, frame):
    def _impl(frames):
        message_type = getattr(proto, frames[frame])
        if not isinstance(message_type, (google.protobuf.message.Message, google.protobuf.reflection.GeneratedProtocolMessageType)):
            raise ValueError("Invalid message type <{}>.".format(message_type.__class__.__name__))
        return message_type

    return _impl


if __name__ == "__main__":
    import os
    import sys
    import pkgutil
    import docopt
    from ws4py.server.cherrypyserver import WebSocketTool, WebSocketPlugin

    arguments = docopt.docopt(__doc__, version="Nibbler 1.0")

    host = socket.gethostbyname(arguments['--host'])
    port = int(arguments['--port'])
    index = open(arguments['--index']) if arguments['--index'] is not None else None

    context = zmq.Context()

    # add current working directory for user-defined proto module import
    sys.path.append(os.getcwd())
    proto_module = import_module(arguments['PROTO'])
    proto_resolver = make_simple_resolver(proto_module, 0)
    transcoder = make_transcoder(proto_resolver, pretty_print=arguments['--pretty'])

    WebSocketPlugin(cherrypy.engine).subscribe()
    ProtobufWebSocketPlugin(cherrypy.engine, context, arguments['URL'], transcoder).subscribe()

    class Root(object):
        @cherrypy.expose
        def index(self):
            return pkgutil.get_data('nibbler', 'static/index.html')

        @cherrypy.expose
        def ws(self):
            pass

    cherrypy.config.update({
        'server.socket_host': host,
        'server.socket_port': port
    })

    cherrypy.tools.websocket = WebSocketTool()

    cherrypy.quickstart(Root(), config={
        '/ws': {
            'tools.websocket.on': True,
            'tools.websocket.handler_cls': NibblerWebSocket
        }
    })
